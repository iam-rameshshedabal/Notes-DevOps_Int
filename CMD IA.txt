Configuration
git config: Get and set repository or global options.
git init: Initialize a new Git repository.
git status: Show the status of working directory.
git add: Add changes to the staging area.
git commit: Commit staged changes to the repository.
git rm: Remove files from the working directory and the index.

Branches
----------------------------------------------------------------------------------------------------------
git branch: List, create, or delete branches.
git checkout: Switch branches or restore working tree files.
git merge: Merge changes from one branch into another.
-----------------------------------------------------------------------------------------------------------
Remote Repository
git remote: Manage remote repositories.
git clone: Clone a repository into a new directory.
git pull: Fetch from and merge with another repository or a local branch.
git push: Update remote refs along with associated objects.
-----------------------------------------------------------------------------------------------------------
History
git log: Show commit logs.
git blame: Show what revision and author last modified each line of a file.
git show: Show various types of objects (commit, tag, etc.).
git diff: Show changes between commits, commit and working tree, etc.
-------------------------------------------------------------------------------------------------------
Undoing Changes
git reset: Reset current HEAD to the specified state.
git revert: Revert some existing commits.
git checkout: Discard changes in the working directory.
-----------------------------------------------------------------------------------------------------------
Stashing Changes
git stash: Stash changes in the working directory.
------------------------------------------------------------------------------------------------------------
Tagging
git tag: Create, list, delete, or verify a tag object signed with GPG.
---------------------------------------------------------------------------------------------------------
Submodules
git submodule: Initialize, update, or inspect submodules.
-----------------------------------------------------------------------------------------------------------
Collaboration
git fetch: Download objects and refs from another repository.
git merge: Merge branches or join development histories.
git push: Update remote refs along with associated objects.
git pull-request: Open a pull request on GitHub.
-----------------------------------------------------------------------------------------------------------------
Miscellaneous
git help: Display help information about Git commands.
git version: Display the current Git version.
git gc: Cleanup unnecessary files and optimize the local repository.
==================================================================================================================================================
Docker CMD
1. docker run: "docker run -d --name my_container nginx" ->This command is used to create and start a new container based on a Docker image
2. docker ps: lists the running containers ->IDs, names, status
3. docker images: lists the Docker images -> repository, tag, and size
4. docker pull: docker pull ubuntu:latest->download Docker images from a registry--> docker push:"docker push my_image:tag"->pushes a Docker image to registry
5. docker build: "docker build -t my_image:latest" ->builds a Docker image from a Dockerfile
6. docker stop: "docker stop my_container" ->stops one or more running containers
7. docker rm:"docker rm my_container" ->removes one or more containers
8. docker rmi:"docker rmi my_image:latest" ->removes one or more Docker images
9. docker exec: "docker exec -it my_container bash" -> runs a command inside a running container
10.docker-compose up:"docker-compose up -d"-> starts services defined in a Docker Compose file
11.docker-compose down:"docker-compose down" -> stops and removes containers defined in a Docker Compose file - docker-compose.yml
12.docker network:"docker network create my_network"-> Docker networks, allowing you to create, inspect, connect, and disconnect networks
13.docker volume:"docker volume create my_volume" -> Docker volumes, enabling data persistence and sharing between containers
14.docker logs:"docker logs my_container" -> retrieves the logs generated by a container
15.docker inspect:"docker inspect my_container"->provides detailed information about Docker objects such as containers, images, volumes, and networks
16.docker commit:"docker commit my_container my_image:tag" ->creates a new image based on changes made to a container
17.docker tag:"docker tag my_image:latest my_registry/my_image:new_tag" -> command assigns a new tag to an existing Docker image
=======================================================================================================================================================
k8s
1.kubectl get:"kubectl get pods"-> Retrieve information about one or more resources
2.kubectl describe:"kubectl describe pod <pod_name>" -> Show details of a specific resource or resource type
3.kubectl create:"kubectl create -f <filename.yaml>" -> Create a new resource from a file
4.kubectl apply:"kubectl apply -f <filename.yaml>" ->Apply changes to resources by specifying a configuration file.
5.kubectl delete:"kubectl delete pod <pod_name>" -> Delete one or more resources
6.kubectl exec:"kubectl exec -it <pod_name> -- <command>" ->Execute a command in a running container
7.kubectl logs:"kubectl logs <pod_name>"->Print the logs from a container in a Pod
8.kubectl port-forward:"ubectl port-forward <pod_name> <local_port>:<pod_port>"-> Forward one or more local ports to a Pod
9.kubectl scale:"kubectl scale deployment <deployment_name> --replicas=<replica_count>"->Scale the number of replicas in a Deployment,ReplicaSet,StatefulSet
10.kubectl rollout:"kubectl rollout status deployment <deployment_name>"-> Manage rolling updates and rollbacks of Deployments
11.kubectl get events:"kubectl get events"->Retrieve events from the cluster
12.kubectl describe nodes:"kubectl describe nodes"->Show details of nodes in the cluster
13.kubectl get namespaces:"kubectl get namespaces"->List all namespaces in the cluster
14.kubectl create namespace:"kubectl create namespace <namespace_name>"-> Create a new namespace
15.kubectl label:"kubectl label pod <pod_name> <key>=<value>"->Add or update labels on resources
16.kubectl edit:"kubectl edit pod <pod_name>"->Edit resources in an external editor
17.kubectl apply -f -:"cat <filename.yaml> | kubectl apply -f -"->Apply changes directly from stdin
=======================================================================================================================================================
Terraform
1.terraform init : initializes the current directory, downloading necessary providers and modules specified in the configuration files
2.terraform apply: "terraform apply tfplan" -> changes described in the execution plan (tfplan) to provision, modify, or destroy infrastructure resources
3.terraform plan: "terraform plan -out=tfplan"->execution plan based on the current state of the infrastructure and the desired state specified in the Terraform configuration files
4.terraform destroy:->destroys all resources managed by the Terraform configuration in the current directory, effectively tearing down the provisioned infrastructure
5.terraform validate:->validates the syntax and configuration of Terraform files
6.terraform fmt:->ensure consistent styling and indentation according to Terraform's conventions.
7.terraform get:->downloads and installs modules specified in the configuration files from the module registry or local filesystem
8.terraform graph:"terraform graph | dot -Tpng > graph.png" -> visual representation of the dependency graph for the infrastructure described in the Terraform configuration files 
9.terraform output:-> process completes, showing values useful for interacting with or accessing the provisioned resources.
10.terraform show:->human-readable summary of the current state of the Terraform-managed infrastructure, providing details about the resources created,modified, or destroyed during the last Terraform operation.
11.terraform state:terraform state list ->Lists all resources tracked in the Terraform state.
12.terraform taint:"terraform taint aws_instance.example" -> Mark an AWS instance as tainted, forcing it to be destroyed and recreated during the next 
13.terraform untaint:->Remove the tainted state from an AWS instance